/*
 * - Set variables
 * - Define generic|extendable styles
 */
// Media queries
//
// Colette provide a collection of breakpoints and media queries, available in a `$breakpoints` hash.
//
// We handle 3 default primary breakpoints and related media queries:
// ```
// $mainpoints ?= {
//     'sm': "screen and (min-width: 420px)"
//     'md': "screen and (min-width: 768px)"
//     'lg': "screen and (min-width: 960px)"
// }
// ```
// We can also define secondary breakpoints within the `$tweakpoints` collection (which is empty by default).
//
// Colette allows you to:
// - change primary breakpoints by updating the `$mainpoints` within your stylesheet,
// - and/or define additional breakpoints by filling the `$tweakpoints`.
//
// Both collections are merged within `$breakpoints`.
//
// **Usage example**
// ```
// /* stylus file */
// @media $breakpoints.lg
//     /* styles */
// ```
//
// will compile to
// ```
// /* css file */
// @media screen and (min-width: 960px)
//     /* styles */
// ```
//
// Weight: -1
//
// Styleguide: Settings.Grid
/* Grid */
$columns ?= 12 // number of columns
$gutter ?= 12 // gutter width
/* Default primary grid breakpoints */
$mainpoints ?= {
    'sm': "screen and (min-width: 420px)"
    'md': "screen and (min-width: 768px)"
    'lg': "screen and (min-width: 960px)"
}
/* Secondary breakpoints */
$tweakpoints ?= {}
$breakpoints ?= merge($mainpoints, $tweakpoints)

// Fonts
//
// All fonts in the project are set within variables.
//
// ```
// $font-base = 'Helvetica Neue', Helvetica, Arial, sans-serif  // default font / body text
// $font-headings = 'Open Sans', 'Arial', 'Helvetica Neue', Helvetica, sans-serif  // headings
// $font-secondary = 'Open Sans', 'Helvetica Neue', Helvetica, sans-serif // call to action, pagers... etc
// $font-icon = '20mn' // icon font
// ```
//
// Styleguide: Settings.Fonts
$font-base = 'Helvetica Neue', Helvetica, Arial, sans-serif // default font / body text
$font-headings = 'Open Sans', 'Arial', 'Helvetica Neue', Helvetica, sans-serif // headings
$font-secondary = 'Open Sans', 'Helvetica Neue', Helvetica, sans-serif // article label, call to action, pagers... etc.
$font-icon = '20mn' // icon font

// Colors
//
// Every colors in this project are variables
//
// Styleguide: Settings.Colors

// Project colors
//
// Layout and UI generic colors
//
// Colors:
// $color-base:         #4c4d4e - text color
// $color-base-lighten: #e7e7e7 - lighten version
// $color-secondary:    #b7b7b7 - secondary text color
// $color-tertiary:     #878787 - tertiary text color
// $color-links:        #0091aa - links color
// $color-highlight:    #cc190f - highlighted text color
// $color-borders:      #c7c7c7 - borders color
// $color-footer:       #73a0d6 - footer color
// $color-bg-base:      #f8f8f8 - background color
//
// Styleguide: Settings.Colors.Project
$color-base ?= #4c4d4e
$color-base-lighten ?= #e7e7e7
$color-secondary ?= #b7b7b7
$color-tertiary ?= #878787
$color-links ?= #0091aa
$color-highlight ?= #cc190f
$color-borders ?= #c7c7c7
$color-footer ?= #73a0d6
$color-bg-base ?= #f8f8f8


// Alerts colors
//
// Colors for alerts messages.
//
// Colors:
// $color-info:    #0b4892 - Info
// $color-success: #48930b - Success
// $color-warning: #D49711 - Warning
// $color-error:   #cc190f - Error
//
// Styleguide: Settings.Colors.Alerts
$color-info ?= #0b4892
$color-success ?= #3c7a09
$color-warning ?= #B05105
$color-error ?= #cc190f


// Black & White
//
// Universal real black and white
//
// Colors:
// $color-black: #000 - default text color
// $color-white: #fff - background color
//
// Styleguide: Settings.Colors.BnW
$color-black ?= #000
$color-white ?= #fff

// Theme colors
//
// The color palette is based upon 20mn editorial color chart:
// - each editorial section has a related color
// - we use section names as aliases to define color variables and classes names
//
// Colors:
// $color-default:       #0b4892
// $color-sport:         #00b9f3
// $color-entertainment: #cc190f
// $color-economy:       #053042
// $color-community:     #930b48
// $color-weird:         #ef2a82
// $color-partner:       #ff5400
// $color-planet:        #48930b
// $color-media:         #000000
// $color-hightech:      #686868
// $color-native:        #fff7e2
//
// Styleguide: Settings.Colors.Theme
$color-default ?= #0b4892
$color-sport  ?= #00b9f3
$color-entertainment ?= #cc190f
$color-economy ?= #053042
$color-community ?= #930b48
$color-weird ?= #ef2a82
$color-partner ?= #ff5400
$color-planet ?= #48930b
$color-media ?= #000000
$color-hightech ?= #686868
$color-native ?= #fff7e2

/* Sections */
$colors ?= {
    base: $color-base
    default: $color-default
    sport: $color-sport
    entertainment: $color-entertainment
    economy: $color-economy
    community: $color-community
    weird: $color-weird
    partner: $color-partner
    planet: $color-planet
    media: $color-media
    hightech: $color-hightech
    native: $color-native
}

// Contrast
//
// Contrast ratio for accessibility
// https://www.w3.org/TR/WCAG20-TECHS/G18
//
// How to check:
// ```
// contrast-check($forground-color, $background-color, $contrast)
// ```
//
// $contrast:      4.5
// $contrast-low:  3
// $contrast-high: 7
//
// Styleguide: Settings.Contrast
$contrast ?= 4.5
$contrast-low ?= 3
$contrast-high ?= 7

// CSS Settings
//
// Colette provides a `$css-main` collection to let you define which styles you want to include into your final css file.
//
// By default, `$css-main` includes all Colette's files, but you can override it in your project stylus file.
//
// **Example 1: use of `$css-main` **
//
// ```
// /* my_stylus_file.styl */
//
// $css-main = {
//    'base-fonts': '_base/_fonts',
//    'base-form-elements': '_base/_form-elements',
//    'base-init': '_base/_init',
//    'base-typography': '_base/_typography',
//    'layout-grid': '_layout/_grid',
//    'modules-alerts': '_modules/_alerts',
//    'modules-teasers': '_modules/_teasers',
//    'theme-skin': '_theme/_skin'
// }
//
// @require `colette.styl` /* will only '@require' files listed in '$css-main */
//
// /* my custom styles */
// ```
//
//
// **Example 2: handle critical css`**
//
// You need to create a specific stylus file to handle your critical css.
// ```
// /* my_criticalcss_file.styl */
//
// $css-critical = {
//    /* colette needed styles */
//    'modules-avatar': '_modules/_avatar',
//    'modules-breadcrumb': '_modules/_breadcrumb',
//    'modules-buttons': '_modules/_buttons',
//    'modules-socialbar': '_modules/_socialbar',
//    'modules-tabs': '_modules/_tabs',
//    /* custom project stylus files */
//    ...
// }
//
// /* @require files */
// for name, file in $css-critical
//     @require file
//
// /* => will compile to my_criticalcss_file.css */
// ```
//
// Then you'll need to compile the css and inline it into your html markup.
// Suppose you have a gulpfile in your project, and work with Twig templates,
// you can create a `gulp` task to compile the css:
//
// ```
// /* gulpfile.js */
// gulp.task('criticalcss', function () {
//    return gulp.src(cfg.cssDir + 'loop.styl')
//    .pipe(stylus())
//    .pipe(gulp.dest('css/'))
// })
// ```
//
// and then simply include the compiled css file into your template
// (dont't forget the `<style>` tag aroud your `include`!):
// ```
// <style>
//    {%  include 'css/my_criticalcss_file.css' %}
// </style>
// ```
//
// Styleguide: Settings.CssCollections
$css-commons ?= {
    'mixins-contrast-check': '_mixins/_contrastCheck'
    'mixins-contrast-check': '_mixins/_grid'
    'mixins-mask': '_mixins/_mask'
    'mixins-spaces': '_mixins/_spaces'
    '@blocks-block': '_@blocks/_block'
    '@blocks-text': '_@blocks/_text'
}
$css-main ?= {
    'normalize': 'normalize.css/normalize.css'
    'base-fonts': '_base/_fonts'
    'base-init': '_base/_init'
    'base-form-elements': '_base/_form-elements'
    'base-symbols': '_base/_symbols'
    'base-typography': '_base/_typography'
    'layout-footer': '_layout/_footer'
    'layout-grid': '_layout/_grid'
    'modules-alerts': '_modules/_alerts'
    'modules-avatar': '_modules/_avatar'
    'modules-breadcrumb': '_modules/_breadcrumb'
    'modules-buttons': '_modules/_buttons'
    'modules-form-single-row': '_modules/_form-single-row'
    'modules-form-widget': '_modules/_form-widget'
    'modules-icon': '_modules/_icon'
    'modules-loading': '_modules/_loading'
    'modules-media': '_modules/_media'
    'modules-navbar': '_modules/_navbar'
    'modules-required': '_modules/_required'
    'modules-socialbar': '_modules/_socialbar'
    'modules-tabs': '_modules/_tabs'
    'modules-teasers': '_modules/_teasers'
    'theme-skin': '_theme/_skin'
    'helpers-text': '_helpers/_text'
    'helpers-block': '_helpers/_block'
    'helpers-borders': '_helpers/_borders'
    'helpers-box': '_helpers/_box'
    'helpers-colors': '_helpers/_colors'
    'helpers-icons': '_helpers/_icons'
    'helpers-mask': '_helpers/_mask'
    'helpers-spaces': '_helpers/_spaces'
}
$css-require ?= merge($css-commons, $css-main)
